{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SHOW_DELETE_MODAL: \"SHOW_DELETE_MODAL\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: payload.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // WHEN LIST CARD DELETE BTN IS PRESSED, OPEN DELETE MODAL\n\n      case GlobalStoreActionType.SHOW_DELETE_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: true\n          });\n        }\n      // DELETE LIST AFTER PRESSING CONFIRM\n\n      case GlobalStoreActionType.DELETE_MARKED_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: payload.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // FIRST FIGURE OUT WHAT THE NEW LIST'S KEY AND NAME WILL BE\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // CREATES A NEW LIST\n\n\n  store.createNewList = function () {\n    let newName = \"Untitled\" + store.newListCounter;\n    console.log(store.newListCounter);\n    console.log(store.idNamePairs); // MAKE THE NEW LIST\n\n    let newList = {\n      name: newName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\n    };\n\n    async function asyncCreateNewList() {\n      let response = await api.createTop5List(newList);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        let id = top5List._id;\n        console.log(top5List);\n        console.log(id);\n\n        async function getListPairs(top5List) {\n          response = await api.getTop5ListPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CREATE_NEW_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                newListCounter: store.newListCounter + 1,\n                top5List: top5List\n              }\n            });\n          }\n        }\n\n        getListPairs(top5List);\n      }\n    }\n\n    asyncCreateNewList();\n  }; // OPENS THE DELETE MODAL\n\n\n  store.deleteList = function (id) {\n    // GET THE LIST\n    async function asyncDeleteList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List; // console.log(top5List);\n\n        store.showDeleteListModal();\n        storeReducer({\n          type: GlobalStoreActionType.SHOW_DELETE_MODAL,\n          payload: top5List\n        });\n      }\n    }\n\n    asyncDeleteList(id);\n  }; // CONFIRM DELETING LIST\n\n\n  store.deleteMarkedList = function () {\n    // console.log(store.currentList);\n    async function asyncDeleteMarkedList() {\n      let response = await api.deleteTop5ListById(store.currentList._id);\n\n      if (response.data.success) {\n        async function getListPairs() {\n          response = await api.getTop5ListPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            console.log(pairsArray);\n            store.hideDeleteListModal();\n            storeReducer({\n              type: GlobalStoreActionType.DELETE_MARKED_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                newListCounter: store.newListCounter,\n                top5List: null\n              }\n            });\n          }\n        }\n\n        getListPairs();\n      }\n    }\n\n    asyncDeleteMarkedList();\n  }; // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n  // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n\n\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  }; // THIS FUNCTION IS FOR HIDING THE MODAL\n\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"GdrgqzQdrFCovFE76xEv/VMPDOE=\");","map":{"version":3,"sources":["C:/Users/scath/OneDrive/Documents/SBU/CSE 316/HW/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SHOW_DELETE_MODAL","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","CREATE_NEW_LIST","DELETE_MARKED_LIST","changeListName","id","newName","asyncChangeListName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","items","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","createNewList","newList","asyncCreateNewList","createTop5List","deleteList","asyncDeleteList","showDeleteListModal","deleteMarkedList","asyncDeleteMarkedList","deleteTop5ListById","hideDeleteListModal","modal","document","getElementById","classList","add","remove"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAO,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,EAAD,CAAxC;AACP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMM,qBAAqB,GAAG;AACjCC,EAAAA,gBAAgB,EAAE,kBADe;AAEjCC,EAAAA,kBAAkB,EAAE,oBAFa;AAGjCC,EAAAA,kBAAkB,EAAE,oBAHa;AAIjCC,EAAAA,gBAAgB,EAAE,kBAJe;AAKjCC,EAAAA,yBAAyB,EAAE,2BALM;AAMjCC,EAAAA,iBAAiB,EAAE;AANc,CAA9B,C,CASP;;AACA,MAAMC,GAAG,GAAG,IAAIX,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMY,cAAc,GAAG,MAAM;AAAA;;AAChC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC;AAC/BgB,IAAAA,WAAW,EAAE,EADkB;AAE/BC,IAAAA,WAAW,EAAE,IAFkB;AAG/BC,IAAAA,cAAc,EAAE,CAHe;AAI/BC,IAAAA,cAAc,EAAE,KAJe;AAK/BC,IAAAA,UAAU,EAAE,KALmB;AAM/BC,IAAAA,qBAAqB,EAAE;AANQ,GAAD,CAAlC,CAFgC,CAWhC;AACA;;AACA,QAAMC,YAAY,GAAIC,MAAD,IAAY;AAC7B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBF,MAA1B;;AACA,YAAQC,IAAR;AACI;AACA,WAAKnB,qBAAqB,CAACC,gBAA3B;AAA6C;AACzC,iBAAOS,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAES,OAAO,CAACT,WADT;AAEZC,YAAAA,WAAW,EAAEQ,OAAO,CAACC,QAFT;AAGZR,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKhB,qBAAqB,CAACE,kBAA3B;AAA+C;AAC3C,iBAAOQ,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKhB,qBAAqB,CAACG,kBAA3B;AAA+C;AAC3C,iBAAOO,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAES,OADD;AAEZR,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKhB,qBAAqB,CAACI,gBAA3B;AAA6C;AACzC,iBAAOM,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEQ,OAFD;AAGZP,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKhB,qBAAqB,CAACK,yBAA3B;AAAsD;AAClD,iBAAOK,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEQ,OAFD;AAGZP,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,IAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKhB,qBAAqB,CAACwB,eAA3B;AAA4C;AACxC,iBAAOd,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAES,OAAO,CAACT,WADT;AAEZC,YAAAA,WAAW,EAAEQ,OAAO,CAACC,QAFT;AAGZR,YAAAA,cAAc,EAAEO,OAAO,CAACP,cAHZ;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKhB,qBAAqB,CAACM,iBAA3B;AAA8C;AAC1C,iBAAOI,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEQ,OAFD;AAGZP,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;AACD;;AACA,WAAKhB,qBAAqB,CAACyB,kBAA3B;AAA+C;AAC3C,iBAAOf,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAES,OAAO,CAACT,WADT;AAEZC,YAAAA,WAAW,EAAEQ,OAAO,CAACC,QAFT;AAGZR,YAAAA,cAAc,EAAEO,OAAO,CAACP,cAHZ;AAIZS,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZP,YAAAA,qBAAqB,EAAE;AANX,WAAD,CAAf;AAQH;;AACD;AACI,eAAOP,KAAP;AA1FR;AA4FH,GA9FD,CAbgC,CA4GhC;AACA;AACA;AAEA;AACA;;;AACAA,EAAAA,KAAK,CAACiB,cAAN,GAAuB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;AAC1C;AACA,mBAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;AACnC,UAAIG,QAAQ,GAAG,MAAMjC,GAAG,CAACkC,eAAJ,CAAoBJ,EAApB,CAArB;;AACA,UAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIZ,QAAQ,GAAGS,QAAQ,CAACE,IAAT,CAAcX,QAA7B;AACAA,QAAAA,QAAQ,CAACa,IAAT,GAAgBN,OAAhB;;AACA,uBAAeO,UAAf,CAA0Bd,QAA1B,EAAoC;AAChCS,UAAAA,QAAQ,GAAG,MAAMjC,GAAG,CAACuC,kBAAJ,CAAuBf,QAAQ,CAACgB,GAAhC,EAAqChB,QAArC,CAAjB;;AACA,cAAIS,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,2BAAeK,YAAf,CAA4BjB,QAA5B,EAAsC;AAClCS,cAAAA,QAAQ,GAAG,MAAMjC,GAAG,CAAC0C,gBAAJ,EAAjB;;AACA,kBAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,oBAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcrB,WAA/B;AACAM,gBAAAA,YAAY,CAAC;AACTE,kBAAAA,IAAI,EAAEnB,qBAAqB,CAACC,gBADnB;AAETmB,kBAAAA,OAAO,EAAE;AACLT,oBAAAA,WAAW,EAAE6B,UADR;AAELnB,oBAAAA,QAAQ,EAAEA;AAFL;AAFA,iBAAD,CAAZ;AAOH;AACJ;;AACDiB,YAAAA,YAAY,CAACjB,QAAD,CAAZ;AACH;AACJ;;AACDc,QAAAA,UAAU,CAACd,QAAD,CAAV;AACH;AACJ;;AACDQ,IAAAA,mBAAmB,CAACF,EAAD,CAAnB;AACH,GA9BD,CAlHgC,CAkJhC;;;AACAlB,EAAAA,KAAK,CAACgC,gBAAN,GAAyB,YAAY;AACjCxB,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAEnB,qBAAqB,CAACE,kBADnB;AAETkB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD,CAnJgC,CA0JhC;;;AACAX,EAAAA,KAAK,CAACiC,eAAN,GAAwB,YAAY;AAChC,mBAAeC,oBAAf,GAAsC;AAClC,YAAMb,QAAQ,GAAG,MAAMjC,GAAG,CAAC0C,gBAAJ,EAAvB;;AACA,UAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcrB,WAA/B;AACAM,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAEnB,qBAAqB,CAACG,kBADnB;AAETiB,UAAAA,OAAO,EAAEoB;AAFA,SAAD,CAAZ;AAIH,OAND,MAOK;AACDI,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;AACJ;;AACDF,IAAAA,oBAAoB;AACvB,GAfD,CA3JgC,CA4KhC;AACA;AACA;AACA;;;AACAlC,EAAAA,KAAK,CAACqC,cAAN,GAAuB,UAAUnB,EAAV,EAAc;AACjC,mBAAeoB,mBAAf,CAAmCpB,EAAnC,EAAuC;AACnC,UAAIG,QAAQ,GAAG,MAAMjC,GAAG,CAACkC,eAAJ,CAAoBJ,EAApB,CAArB;;AACA,UAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIZ,QAAQ,GAAGS,QAAQ,CAACE,IAAT,CAAcX,QAA7B;AAEAS,QAAAA,QAAQ,GAAG,MAAMjC,GAAG,CAACuC,kBAAJ,CAAuBf,QAAQ,CAACgB,GAAhC,EAAqChB,QAArC,CAAjB;;AACA,YAAIS,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvBhB,UAAAA,YAAY,CAAC;AACTE,YAAAA,IAAI,EAAEnB,qBAAqB,CAACI,gBADnB;AAETgB,YAAAA,OAAO,EAAEC;AAFA,WAAD,CAAZ;AAIAZ,UAAAA,KAAK,CAACuC,OAAN,CAAcC,IAAd,CAAmB,eAAe5B,QAAQ,CAACgB,GAA3C;AACH;AACJ;AACJ;;AACDU,IAAAA,mBAAmB,CAACpB,EAAD,CAAnB;AACH,GAjBD;;AAkBAlB,EAAAA,KAAK,CAACyC,sBAAN,GAA+B,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACjD,QAAIC,WAAW,GAAG,IAAIvD,oBAAJ,CAAyBW,KAAzB,EAAgC0C,KAAhC,EAAuCC,GAAvC,CAAlB;AACA7C,IAAAA,GAAG,CAAC+C,cAAJ,CAAmBD,WAAnB;AACH,GAHD;;AAIA5C,EAAAA,KAAK,CAAC8C,QAAN,GAAiB,UAAUJ,KAAV,EAAiBC,GAAjB,EAAsB;AACnCD,IAAAA,KAAK,IAAI,CAAT;AACAC,IAAAA,GAAG,IAAI,CAAP;;AACA,QAAID,KAAK,GAAGC,GAAZ,EAAiB;AACb,UAAII,IAAI,GAAG/C,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBN,KAAxB,CAAX;;AACA,WAAK,IAAIO,CAAC,GAAGP,KAAb,EAAoBO,CAAC,GAAGN,GAAxB,EAA6BM,CAAC,EAA9B,EAAkC;AAC9BjD,QAAAA,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBC,CAAxB,IAA6BjD,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBC,CAAC,GAAG,CAA5B,CAA7B;AACH;;AACDjD,MAAAA,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBL,GAAxB,IAA+BI,IAA/B;AACH,KAND,MAOK,IAAIL,KAAK,GAAGC,GAAZ,EAAiB;AAClB,UAAII,IAAI,GAAG/C,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBN,KAAxB,CAAX;;AACA,WAAK,IAAIO,CAAC,GAAGP,KAAb,EAAoBO,CAAC,GAAGN,GAAxB,EAA6BM,CAAC,EAA9B,EAAkC;AAC9BjD,QAAAA,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBC,CAAxB,IAA6BjD,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBC,CAAC,GAAG,CAA5B,CAA7B;AACH;;AACDjD,MAAAA,KAAK,CAACG,WAAN,CAAkB6C,KAAlB,CAAwBL,GAAxB,IAA+BI,IAA/B;AACH,KAhBkC,CAkBnC;;;AACA/C,IAAAA,KAAK,CAACkD,iBAAN;AACH,GApBD;;AAqBAlD,EAAAA,KAAK,CAACkD,iBAAN,GAA0B,YAAY;AAClC,mBAAeC,sBAAf,GAAwC;AACpC,YAAM9B,QAAQ,GAAG,MAAMjC,GAAG,CAACuC,kBAAJ,CAAuB3B,KAAK,CAACG,WAAN,CAAkByB,GAAzC,EAA8C5B,KAAK,CAACG,WAApD,CAAvB;;AACA,UAAIkB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvBhB,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAEnB,qBAAqB,CAACI,gBADnB;AAETgB,UAAAA,OAAO,EAAEX,KAAK,CAACG;AAFN,SAAD,CAAZ;AAIH;AACJ;;AACDgD,IAAAA,sBAAsB;AACzB,GAXD;;AAYAnD,EAAAA,KAAK,CAACoD,IAAN,GAAa,YAAY;AACrBtD,IAAAA,GAAG,CAACuD,eAAJ;AACH,GAFD;;AAGArD,EAAAA,KAAK,CAACsD,IAAN,GAAa,YAAY;AACrBxD,IAAAA,GAAG,CAACyD,aAAJ;AACH,GAFD,CA1OgC,CA8OhC;;;AACAvD,EAAAA,KAAK,CAACwD,uBAAN,GAAgC,YAAY;AACxChD,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAEnB,qBAAqB,CAACK,yBADnB;AAETe,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD,CA/OgC,CAqPhC;;;AACAX,EAAAA,KAAK,CAACyD,aAAN,GAAsB,YAAY;AAC9B,QAAItC,OAAO,GAAG,aAAanB,KAAK,CAACI,cAAjC;AACA+B,IAAAA,OAAO,CAACC,GAAR,CAAYpC,KAAK,CAACI,cAAlB;AACA+B,IAAAA,OAAO,CAACC,GAAR,CAAYpC,KAAK,CAACE,WAAlB,EAH8B,CAK9B;;AACA,QAAIwD,OAAO,GAAG;AACVjC,MAAAA,IAAI,EAAEN,OADI;AAEV6B,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB;AAFG,KAAd;;AAIA,mBAAeW,kBAAf,GAAoC;AAChC,UAAItC,QAAQ,GAAG,MAAMjC,GAAG,CAACwE,cAAJ,CAAmBF,OAAnB,CAArB;;AACA,UAAIrC,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIZ,QAAQ,GAAGS,QAAQ,CAACE,IAAT,CAAcX,QAA7B;AACA,YAAIM,EAAE,GAAGN,QAAQ,CAACgB,GAAlB;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAZ;AACAuB,QAAAA,OAAO,CAACC,GAAR,CAAYlB,EAAZ;;AACA,uBAAeW,YAAf,CAA4BjB,QAA5B,EAAsC;AAClCS,UAAAA,QAAQ,GAAG,MAAMjC,GAAG,CAAC0C,gBAAJ,EAAjB;;AACA,cAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,gBAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcrB,WAA/B;AACAM,YAAAA,YAAY,CAAC;AACTE,cAAAA,IAAI,EAAEnB,qBAAqB,CAACwB,eADnB;AAETJ,cAAAA,OAAO,EAAE;AACLT,gBAAAA,WAAW,EAAE6B,UADR;AAEL3B,gBAAAA,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAFlC;AAGLQ,gBAAAA,QAAQ,EAAEA;AAHL;AAFA,aAAD,CAAZ;AAQH;AACJ;;AACDiB,QAAAA,YAAY,CAACjB,QAAD,CAAZ;AAEH;AACJ;;AACD+C,IAAAA,kBAAkB;AACrB,GApCD,CAtPgC,CA2RhC;;;AACA3D,EAAAA,KAAK,CAAC6D,UAAN,GAAmB,UAAU3C,EAAV,EAAc;AAC7B;AACA,mBAAe4C,eAAf,CAA+B5C,EAA/B,EAAmC;AAC/B,UAAIG,QAAQ,GAAG,MAAMjC,GAAG,CAACkC,eAAJ,CAAoBJ,EAApB,CAArB;;AACA,UAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIZ,QAAQ,GAAGS,QAAQ,CAACE,IAAT,CAAcX,QAA7B,CADuB,CAEvB;;AACAZ,QAAAA,KAAK,CAAC+D,mBAAN;AACAvD,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAEnB,qBAAqB,CAACM,iBADnB;AAETc,UAAAA,OAAO,EAAEC;AAFA,SAAD,CAAZ;AAIH;AACJ;;AACDkD,IAAAA,eAAe,CAAC5C,EAAD,CAAf;AAEH,GAhBD,CA5RgC,CA6ShC;;;AACAlB,EAAAA,KAAK,CAACgE,gBAAN,GAAyB,YAAY;AACjC;AACA,mBAAeC,qBAAf,GAAuC;AACnC,UAAI5C,QAAQ,GAAG,MAAMjC,GAAG,CAAC8E,kBAAJ,CAAuBlE,KAAK,CAACG,WAAN,CAAkByB,GAAzC,CAArB;;AACA,UAAIP,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,uBAAeK,YAAf,GAA8B;AAC1BR,UAAAA,QAAQ,GAAG,MAAMjC,GAAG,CAAC0C,gBAAJ,EAAjB;;AACA,cAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACvB,gBAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAT,CAAcrB,WAA/B;AACAiC,YAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA/B,YAAAA,KAAK,CAACmE,mBAAN;AACA3D,YAAAA,YAAY,CAAC;AACTE,cAAAA,IAAI,EAAEnB,qBAAqB,CAACyB,kBADnB;AAETL,cAAAA,OAAO,EAAE;AACLT,gBAAAA,WAAW,EAAE6B,UADR;AAEL3B,gBAAAA,cAAc,EAAEJ,KAAK,CAACI,cAFjB;AAGLQ,gBAAAA,QAAQ,EAAE;AAHL;AAFA,aAAD,CAAZ;AAQH;AACJ;;AACDiB,QAAAA,YAAY;AACf;AACJ;;AACDoC,IAAAA,qBAAqB;AACxB,GAzBD,CA9SgC,CAwUhC;AACA;;;AACAjE,EAAAA,KAAK,CAAC+D,mBAAN,GAA4B,YAAY;AACpC,QAAIK,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACG,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;AACH,GAHD,CA1UgC,CA8UhC;;;AACAxE,EAAAA,KAAK,CAACmE,mBAAN,GAA4B,YAAY;AACpC,QAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACG,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB;AACH,GAHD,CA/UgC,CAoVhC;;;AACA,SAAO;AAAEzE,IAAAA,KAAF;AAASQ,IAAAA;AAAT,GAAP;AACH,CAtVM;;GAAMT,c","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    SHOW_DELETE_MODAL: \"SHOW_DELETE_MODAL\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: payload.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // WHEN LIST CARD DELETE BTN IS PRESSED, OPEN DELETE MODAL\r\n            case GlobalStoreActionType.SHOW_DELETE_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: true\r\n                });\r\n            }\r\n            // DELETE LIST AFTER PRESSING CONFIRM\r\n            case GlobalStoreActionType.DELETE_MARKED_LIST: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: payload.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // FIRST FIGURE OUT WHAT THE NEW LIST'S KEY AND NAME WILL BE\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: top5List\r\n                    });\r\n                    store.history.push(\"/top5list/\" + top5List._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateCurrentList = function () {\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n    // CREATES A NEW LIST\r\n    store.createNewList = function () {\r\n        let newName = \"Untitled\" + store.newListCounter;\r\n        console.log(store.newListCounter);\r\n        console.log(store.idNamePairs);\r\n\r\n        // MAKE THE NEW LIST\r\n        let newList = {\r\n            name: newName,\r\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\r\n        };\r\n        async function asyncCreateNewList() {\r\n            let response = await api.createTop5List(newList);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                let id = top5List._id;\r\n                console.log(top5List);\r\n                console.log(id);\r\n                async function getListPairs(top5List) {\r\n                    response = await api.getTop5ListPairs();\r\n                    if (response.data.success) {\r\n                        let pairsArray = response.data.idNamePairs;\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                            payload: {\r\n                                idNamePairs: pairsArray,\r\n                                newListCounter: store.newListCounter + 1,\r\n                                top5List: top5List\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                getListPairs(top5List);\r\n\r\n            }\r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n    // OPENS THE DELETE MODAL\r\n    store.deleteList = function (id) {\r\n        // GET THE LIST\r\n        async function asyncDeleteList(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                // console.log(top5List);\r\n                store.showDeleteListModal();\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SHOW_DELETE_MODAL,\r\n                    payload: top5List\r\n                });\r\n            }\r\n        }\r\n        asyncDeleteList(id);\r\n\r\n    }\r\n    // CONFIRM DELETING LIST\r\n    store.deleteMarkedList = function () {\r\n        // console.log(store.currentList);\r\n        async function asyncDeleteMarkedList() {\r\n            let response = await api.deleteTop5ListById(store.currentList._id);\r\n            if (response.data.success) {\r\n                async function getListPairs() {\r\n                    response = await api.getTop5ListPairs();\r\n                    if (response.data.success) {\r\n                        let pairsArray = response.data.idNamePairs;\r\n                        console.log(pairsArray);\r\n                        store.hideDeleteListModal();\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.DELETE_MARKED_LIST,\r\n                            payload: {\r\n                                idNamePairs: pairsArray,\r\n                                newListCounter: store.newListCounter,\r\n                                top5List: null\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                getListPairs();\r\n            }\r\n        }\r\n        asyncDeleteMarkedList();\r\n    }\r\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\r\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\r\n    store.showDeleteListModal = function () {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n    // THIS FUNCTION IS FOR HIDING THE MODAL\r\n    store.hideDeleteListModal = function () {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}